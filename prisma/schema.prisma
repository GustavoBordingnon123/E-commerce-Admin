// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id              String    @id @default(uuid())
  name            String
  userId          String
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[] @relation("StoreToCategory")
  authors         Author[]     @relation("StoreToAuthor")
  publishers      Publisher[]     @relation("StoreToPublisher")
  products        Product[]  @relation("StoreToProduct")
  orders          Order[]    @relation("StoreToOrder")
  users           User[]     @relation("StoreToUser")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}


model Product {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToProduct",fields: [storeId], references: [id])
  categoryId  String
  category    Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  description  String   @db.VarChar(5000)
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  authorId    String    // Foreign Key to author
  author      Author    @relation(fields: [authorId], references: [id])
  publisherId String    // Foreign Key to publisher
  publisher   Publisher @relation(fields: [publisherId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([authorId])
  @@index([publisherId])
}

model Billboard {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]   @relation("CategoryToProduct") 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Author{
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToAuthor",fields: [storeId], references: [id])
  name        String
  value        String
  products    Product[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}


model Publisher{
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToPublisher",fields: [storeId], references: [id])
  name        String
  value        String
  products    Product[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Image {
  id          String @id @default(uuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  @@index([productId])
}

model Order{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder",fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model User{
  id String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToUser",fields: [storeId], references: [id])
  email String @unique
  password String
  name String
  cpf String
  phone String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}